using System;
using XRL.World.Capabilities;

namespace XRL.World.Parts
{
	[Serializable]
	public class HologramInvulnerability : IPart
	{
		public override void AddedAfterCreation()
		{
			base.AddedAfterCreation();
			ParentObject.MakeNonflammable();
		}

		public override bool WantEvent(int ID, int cascade)
		{
			if (!base.WantEvent(ID, cascade) && ID != PooledEvent<AnimateEvent>.ID && ID != BeforeApplyDamageEvent.ID && ID != PooledEvent<CanBeDismemberedEvent>.ID && ID != PooledEvent<CanBeInvoluntarilyMovedEvent>.ID && ID != PooledEvent<GetElectricalConductivityEvent>.ID && ID != PooledEvent<GetMatterPhaseEvent>.ID && ID != PooledEvent<GetMaximumLiquidExposureEvent>.ID && ID != PooledEvent<GetScanTypeEvent>.ID && ID != ObjectCreatedEvent.ID)
			{
				return ID == PooledEvent<RespiresEvent>.ID;
			}
			return true;
		}

		public override bool HandleEvent(BeforeApplyDamageEvent E)
		{
			if (E.Actor != null && (IComponent<GameObject>.Visible(E.Actor) || IComponent<GameObject>.Visible(E.Object)))
			{
				string color = IComponent<GameObject>.ConsequentialColor(ParentObject);
				IComponent<GameObject>.AddPlayerMessage(E.Actor.Poss("attack") + " passes harmlessly through " + E.Object.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + ".", color);
				E.DidSpecialEffect = true;
			}
			return false;
		}

		public override bool HandleEvent(AnimateEvent E)
		{
			E.WantToRemove(this);
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(ObjectCreatedEvent E)
		{
			ParentObject.MakeImperviousToHeat();
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(GetElectricalConductivityEvent E)
		{
			if (E.Pass == 1 && E.Object == ParentObject)
			{
				E.Value = 0;
				return false;
			}
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(CanBeDismemberedEvent E)
		{
			if (E.Object == ParentObject)
			{
				return false;
			}
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(CanBeInvoluntarilyMovedEvent E)
		{
			if (E.Object == ParentObject)
			{
				return false;
			}
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(GetMatterPhaseEvent E)
		{
			E.MinMatterPhase(4);
			return false;
		}

		public override bool HandleEvent(GetMaximumLiquidExposureEvent E)
		{
			E.PercentageReduction = 100;
			return false;
		}

		public override bool HandleEvent(GetScanTypeEvent E)
		{
			if (E.Object == ParentObject)
			{
				E.ScanType = Scanning.Scan.Tech;
				return false;
			}
			return base.HandleEvent(E);
		}

		public override bool HandleEvent(RespiresEvent E)
		{
			return false;
		}

		public override bool AllowStaticRegistration()
		{
			return true;
		}
	}
}
