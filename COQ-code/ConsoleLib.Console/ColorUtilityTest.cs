using System;
using NUnit.Framework;

namespace ConsoleLib.Console
{
	public class ColorUtilityTest
	{
		[TestCase("{{B|wet &MScorwofagoofouz, the nimble Snapjaw Gutspiller}}", 20, "{{B|wet &MScorwofagoofouz,}}")]
		[TestCase("{{red|12345{{green|67890}}}}", 7, "{{red|12345{{green|67}}}}")]
		[TestCase("&M1&G2&B3&Y4&W5", 3, "&M1&G2&B3")]
		public void TestClipExceptFormatting(string Input, int Length, string Expected)
		{
			Assert.AreEqual(Expected, ColorUtility.ClipExceptFormatting(Input, Length));
		}

		[TestCase("foo", "foo", 0)]
		[TestCase("{{R|foo}}", "{{R|foo}}", 0)]
		[TestCase("{{R|foo}}", "foo", 0)]
		[TestCase("foo", "{{R|foo}}", 0)]
		[TestCase("foo&W", "foo&W", 0)]
		[TestCase("foo&W", "foo", 0)]
		[TestCase("foo", "foo&W", 0)]
		[TestCase("&Wfoo", "&Wfoo", 0)]
		[TestCase("&Wfoo", "foo", 0)]
		[TestCase("foo", "&Wfoo", 0)]
		[TestCase("fo&Wo", "fo&Wo", 0)]
		[TestCase("fo&Wo", "foo", 0)]
		[TestCase("foo", "fo&Wo", 0)]
		[TestCase("f&Woo", "fo&Wo", 0)]
		[TestCase("fo&Wo", "f&Woo", 0)]
		[TestCase("foo{{g|}}", "foo{{g|}}", 0)]
		[TestCase("foo{{g|}}", "foo", 0)]
		[TestCase("foo", "foo{{g|}}", 0)]
		[TestCase("{{g|}}foo", "{{g|}}foo", 0)]
		[TestCase("{{g|}}foo", "foo", 0)]
		[TestCase("foo", "{{g|}}foo", 0)]
		[TestCase("fo{{g|}}o", "fo{{g|}}o", 0)]
		[TestCase("fo{{g|}}o", "foo", 0)]
		[TestCase("foo", "fo{{g|}}o", 0)]
		[TestCase("f{{g|}}oo", "fo{{g|}}o", 0)]
		[TestCase("fo{{g|}}o", "f{{g|}}oo", 0)]
		[TestCase("foo", "foobar", -1)]
		[TestCase("foobar", "foo", 1)]
		[TestCase("{{rainbow|foo}}", "{{rainbow|foobar}}", -1)]
		[TestCase("{{rainbow|foobar}}", "{{rainbow|foo}}", 1)]
		[TestCase("{{rainbow|foo}}", "foobar", -1)]
		[TestCase("foobar", "{{rainbow|foo}}", 1)]
		[TestCase("foo", "{{rainbow|foobar}}", -1)]
		[TestCase("{{rainbow|foobar}}", "foo", 1)]
		[TestCase("fo{{rainbow|o}}", "{{rainbow|foo}}bar", -1)]
		[TestCase("{{rainbow|foo}}bar", "fo{{rainbow|o}}", 1)]
		[TestCase("foo", "abacab", 1)]
		[TestCase("abacab", "foo", -1)]
		[TestCase("{{C-b-C sequence|foo}}", "{{C-b-C sequence|abacab}}", 1)]
		[TestCase("{{C-b-C sequence|abacab}}", "{{C-b-C sequence|foo}}", -1)]
		[TestCase("{{C-b-C sequence|foo}}", "abacab", 1)]
		[TestCase("abacab", "{{C-b-C sequence|foo}}", -1)]
		[TestCase("foo", "{{C-b-C sequence|abacab}}", 1)]
		[TestCase("{{C-b-C sequence|abacab}}", "foo", -1)]
		[TestCase("fo{{C-b-C sequence|o}}", "{{C-b-C sequence|aba}}cab", 1)]
		[TestCase("{{C-b-C sequence|aba}}cab", "fo{{C-b-C sequence|o}}", -1)]
		[TestCase("Lustrous Frogsfriend", "{{g-G-G-g-g-G-G-g sequence|Lustrous Frogsfriend}}", 0)]
		public void TestCompareExceptFormatting(string String1, string String2, int Expected)
		{
			Assert.AreEqual(Expected, Math.Min(Math.Max(ColorUtility.CompareExceptFormatting(String1, String2), -1), 1));
		}

		[TestCase("foo", "foo", 0)]
		[TestCase("{{R|foo}}", "{{R|foo}}", 0)]
		[TestCase("{{R|foo}}", "foo", 0)]
		[TestCase("foo", "{{R|foo}}", 0)]
		[TestCase("foo&W", "foo&W", 0)]
		[TestCase("foo&W", "foo", 0)]
		[TestCase("foo", "foo&W", 0)]
		[TestCase("&Wfoo", "&Wfoo", 0)]
		[TestCase("&Wfoo", "foo", 0)]
		[TestCase("foo", "&Wfoo", 0)]
		[TestCase("fo&Wo", "fo&Wo", 0)]
		[TestCase("fo&Wo", "foo", 0)]
		[TestCase("foo", "fo&Wo", 0)]
		[TestCase("f&Woo", "fo&Wo", 0)]
		[TestCase("fo&Wo", "f&Woo", 0)]
		[TestCase("foo{{g|}}", "foo{{g|}}", 0)]
		[TestCase("foo{{g|}}", "foo", 0)]
		[TestCase("foo", "foo{{g|}}", 0)]
		[TestCase("{{g|}}foo", "{{g|}}foo", 0)]
		[TestCase("{{g|}}foo", "foo", 0)]
		[TestCase("foo", "{{g|}}foo", 0)]
		[TestCase("fo{{g|}}o", "fo{{g|}}o", 0)]
		[TestCase("fo{{g|}}o", "foo", 0)]
		[TestCase("foo", "fo{{g|}}o", 0)]
		[TestCase("f{{g|}}oo", "fo{{g|}}o", 0)]
		[TestCase("fo{{g|}}o", "f{{g|}}oo", 0)]
		[TestCase("foo", "foobar", -1)]
		[TestCase("foobar", "foo", 1)]
		[TestCase("{{rainbow|foo}}", "{{rainbow|foobar}}", -1)]
		[TestCase("{{rainbow|foobar}}", "{{rainbow|foo}}", 1)]
		[TestCase("{{rainbow|foo}}", "foobar", -1)]
		[TestCase("foobar", "{{rainbow|foo}}", 1)]
		[TestCase("foo", "{{rainbow|foobar}}", -1)]
		[TestCase("{{rainbow|foobar}}", "foo", 1)]
		[TestCase("fo{{rainbow|o}}", "{{rainbow|foo}}bar", -1)]
		[TestCase("{{rainbow|foo}}bar", "fo{{rainbow|o}}", 1)]
		[TestCase("foo", "abacab", 1)]
		[TestCase("abacab", "foo", -1)]
		[TestCase("{{C-b-C sequence|foo}}", "{{C-b-C sequence|abacab}}", 1)]
		[TestCase("{{C-b-C sequence|abacab}}", "{{C-b-C sequence|foo}}", -1)]
		[TestCase("{{C-b-C sequence|foo}}", "abacab", 1)]
		[TestCase("abacab", "{{C-b-C sequence|foo}}", -1)]
		[TestCase("foo", "{{C-b-C sequence|abacab}}", 1)]
		[TestCase("{{C-b-C sequence|abacab}}", "foo", -1)]
		[TestCase("fo{{C-b-C sequence|o}}", "{{C-b-C sequence|aba}}cab", 1)]
		[TestCase("{{C-b-C sequence|aba}}cab", "fo{{C-b-C sequence|o}}", -1)]
		[TestCase("Lustrous Frogsfriend", "{{g-G-G-g-g-G-G-g sequence|Lustrous Frogsfriend}}", 0)]
		[TestCase("Foo", "foO", 0)]
		[TestCase("{{R|fOo}}", "{{R|Foo}}", 0)]
		[TestCase("{{R|foO}}", "FoO", 0)]
		[TestCase("Foo", "{{R|fOo}}", 0)]
		[TestCase("foO&W", "foo&W", 0)]
		[TestCase("FOO&W", "fOo", 0)]
		[TestCase("foo", "FOO&W", 0)]
		[TestCase("&Wfoo", "&WfOO", 0)]
		[TestCase("&WFoo", "foo", 0)]
		[TestCase("foO", "&Wfoo", 0)]
		[TestCase("fo&Wo", "fO&Wo", 0)]
		[TestCase("FO&WO", "FOO", 0)]
		[TestCase("FOo", "FO&Wo", 0)]
		[TestCase("F&WoO", "FO&Wo", 0)]
		[TestCase("fo&WO", "f&Woo", 0)]
		[TestCase("fOo{{g|}}", "Foo{{g|}}", 0)]
		[TestCase("Foo{{g|}}", "Foo", 0)]
		[TestCase("foo", "foO{{g|}}", 0)]
		[TestCase("{{g|}}fOO", "{{g|}}fOO", 0)]
		[TestCase("{{g|}}foO", "FOo", 0)]
		[TestCase("foo", "{{g|}}fOo", 0)]
		[TestCase("fO{{g|}}o", "fo{{g|}}o", 0)]
		[TestCase("Fo{{g|}}o", "fOO", 0)]
		[TestCase("FOO", "fo{{g|}}O", 0)]
		[TestCase("F{{g|}}Oo", "fO{{g|}}O", 0)]
		[TestCase("fO{{g|}}O", "F{{g|}}Oo", 0)]
		[TestCase("fOo", "foObAr", -1)]
		[TestCase("FOobAR", "FOo", 1)]
		[TestCase("{{rainbow|foo}}", "{{rainbow|FOOBAR}}", -1)]
		[TestCase("{{rainbow|fOObar}}", "{{rainbow|foO}}", 1)]
		[TestCase("{{rainbow|FOo}}", "FOobar", -1)]
		[TestCase("foOBar", "{{rainbow|foO}}", 1)]
		[TestCase("foO", "{{rainbow|foobAr}}", -1)]
		[TestCase("{{rainbow|FOOBAR}}", "FOO", 1)]
		[TestCase("fo{{rainbow|O}}", "{{rainbow|FOO}}bar", -1)]
		[TestCase("{{rainbow|FOo}}bar", "fO{{rainbow|O}}", 1)]
		[TestCase("FOO", "aBacab", 1)]
		[TestCase("ABACab", "FOO", -1)]
		[TestCase("{{C-b-C sequence|Foo}}", "{{C-b-C sequence|ABACAB}}", 1)]
		[TestCase("{{C-b-C sequence|AbAcAb}}", "{{C-b-C sequence|fOo}}", -1)]
		[TestCase("{{C-b-C sequence|FoO}}", "aBACAb", 1)]
		[TestCase("abaCAb", "{{C-b-C sequence|Foo}}", -1)]
		[TestCase("Foo", "{{C-b-C sequence|abacab}}", 1)]
		[TestCase("{{C-b-C sequence|ABacab}}", "foO", -1)]
		[TestCase("fO{{C-b-C sequence|o}}", "{{C-b-C sequence|Aba}}cab", 1)]
		[TestCase("{{C-b-C sequence|ABA}}cab", "fo{{C-b-C sequence|O}}", -1)]
		[TestCase("LustRous FrOgsFriend", "{{g-G-G-g-g-G-G-g sequence|lustRous FrOgsFriEND}}", 0)]
		public void TestCompareExceptFormattingAndCase(string String1, string String2, int Expected)
		{
			Assert.AreEqual(Expected, Math.Min(Math.Max(ColorUtility.CompareExceptFormattingAndCase(String1, String2), -1), 1));
		}

		[TestCase("{{B|wet &MScorwofagoofouz}}", "wet Scorwofagoofouz")]
		[TestCase("&y{{B|wet &MScorwofagoofouz}}&Y^k", "wet Scorwofagoofouz")]
		[TestCase("{{B|wet}} {{M|Scorwofagoofouz}}", "wet Scorwofagoofouz")]
		[TestCase("{{red|12345{{green|67890}}}}", "1234567890")]
		[TestCase("&M1&G2&B3&Y4&W5", "12345")]
		[TestCase("{{text}}", "")]
		public void TestStripFormatting(string Input, string Expected)
		{
			Assert.AreEqual(Expected, ColorUtility.StripFormatting(Input));
		}
	}
}
